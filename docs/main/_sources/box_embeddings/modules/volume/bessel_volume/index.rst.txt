:mod:`box_embeddings.modules.volume.bessel_volume`
==================================================

.. py:module:: box_embeddings.modules.volume.bessel_volume


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   box_embeddings.modules.volume.bessel_volume.BesselApproxVolume



Functions
~~~~~~~~~

.. autoapisummary::

   box_embeddings.modules.volume.bessel_volume.bessel_volume_approx
   box_embeddings.modules.volume.bessel_volume.log_bessel_volume_approx


.. data:: eps
   :annotation: = 1e-23

   

.. data:: euler_gamma
   :annotation: = 0.5772156649015329

   

.. function:: bessel_volume_approx(box_tensor: box_embeddings.parameterizations.box_tensor.BoxTensor, beta: float = 1.0, gumbel_beta: float = 1.0, scale: float = 1.0) -> torch.Tensor

   Volume of boxes. Uses the Softplus as an approximation of
   Bessel funtion.

   :param box_tensor: input
   :param beta: the beta parameter for the softplus.
   :param gumbel_beta: the gumbel_beta parameter (same value used in intersection).
   :param scale: scale parameter. Should be left as 1.0 (default)
                 in most cases.

   :returns: Tensor of shape (..., ) when self has shape (..., 2, num_dims)

   :raises ValueError: if scale not in (0,1]


.. function:: log_bessel_volume_approx(box_tensor: box_embeddings.parameterizations.box_tensor.BoxTensor, beta: float = 1.0, gumbel_beta: float = 1.0, scale: float = 1.0) -> torch.Tensor

   Volume of boxes. Uses the Softplus as an approximation of
   Bessel funtion.

   :param box_tensor: input.
   :param beta: the beta parameter for the softplus.
   :param gumbel_beta: the gumbel_beta parameter (same value used in intersection).
   :param scale: scale parameter. Should be left as 1.0 (default)
                 in most cases.

   :returns: Tensor of shape (..., ) when self has shape (..., 2, num_dims)

   :raises ValueError: if scale not in (0,1]


.. class:: BesselApproxVolume(log_scale: bool = True, beta: float = 1.0, gumbel_beta: float = 1.0)


   Bases: :class:`box_embeddings.modules.volume.volume.Volume`

   Uses the Softplus as an approximation of
   Bessel function.

   .. attribute:: default_implementation
      :annotation: = hard

      

   .. attribute:: dump_patches
      :annotation: :bool = False

      This allows better BC support for :meth:`load_state_dict`. In
      :meth:`state_dict`, the version number will be saved as in the attribute
      `_metadata` of the returned state dict, and thus pickled. `_metadata` is a
      dictionary with keys that follow the naming convention of state dict. See
      ``_load_from_state_dict`` on how to use this information in loading.

      If new parameters/buffers are added/removed from a module, this number shall
      be bumped, and the module's `_load_from_state_dict` method can compare the
      version number and do appropriate changes if the state dict is from before
      the change.


   .. attribute:: training
      :annotation: :bool

      

   .. attribute:: T_destination
      

      

   .. method:: forward(self, box_tensor: box_embeddings.parameterizations.box_tensor.BoxTensor) -> torch.Tensor

      Soft softplus base (instead of ReLU) volume.

      :param box_tensor: TODO

      :returns: torch.Tensor


   .. method:: register_buffer(self, name: str, tensor: Optional[Tensor], persistent: bool = True) -> None

      Adds a buffer to the module.

      This is typically used to register a buffer that should not to be
      considered a model parameter. For example, BatchNorm's ``running_mean``
      is not a parameter, but is part of the module's state. Buffers, by
      default, are persistent and will be saved alongside parameters. This
      behavior can be changed by setting :attr:`persistent` to ``False``. The
      only difference between a persistent buffer and a non-persistent buffer
      is that the latter will not be a part of this module's
      :attr:`state_dict`.

      Buffers can be accessed as attributes using given names.

      :param name: name of the buffer. The buffer can be accessed
                   from this module using the given name
      :type name: string
      :param tensor: buffer to be registered.
      :type tensor: Tensor
      :param persistent: whether the buffer is part of this module's
                         :attr:`state_dict`.
      :type persistent: bool

      Example::

          >>> self.register_buffer('running_mean', torch.zeros(num_features))


   .. method:: register_parameter(self, name: str, param: Optional[Parameter]) -> None

      Adds a parameter to the module.

      The parameter can be accessed as an attribute using given name.

      :param name: name of the parameter. The parameter can be accessed
                   from this module using the given name
      :type name: string
      :param param: parameter to be added to the module.
      :type param: Parameter


   .. method:: add_module(self, name: str, module: Optional['Module']) -> None

      Adds a child module to the current module.

      The module can be accessed as an attribute using the given name.

      :param name: name of the child module. The child module can be
                   accessed from this module using the given name
      :type name: string
      :param module: child module to be added to the module.
      :type module: Module


   .. method:: apply(self: T, fn: Callable[(['Module'], None)]) -> T

      Applies ``fn`` recursively to every submodule (as returned by ``.children()``)
      as well as self. Typical use includes initializing the parameters of a model
      (see also :ref:`nn-init-doc`).

      :param fn: function to be applied to each submodule
      :type fn: :class:`Module` -> None

      :returns: self
      :rtype: Module

      Example::

          >>> @torch.no_grad()
          >>> def init_weights(m):
          >>>     print(m)
          >>>     if type(m) == nn.Linear:
          >>>         m.weight.fill_(1.0)
          >>>         print(m.weight)
          >>> net = nn.Sequential(nn.Linear(2, 2), nn.Linear(2, 2))
          >>> net.apply(init_weights)
          Linear(in_features=2, out_features=2, bias=True)
          Parameter containing:
          tensor([[ 1.,  1.],
                  [ 1.,  1.]])
          Linear(in_features=2, out_features=2, bias=True)
          Parameter containing:
          tensor([[ 1.,  1.],
                  [ 1.,  1.]])
          Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )
          Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )


   .. method:: cuda(self: T, device: Optional[Union[int, device]] = None) -> T

      Moves all model parameters and buffers to the GPU.

      This also makes associated parameters and buffers different objects. So
      it should be called before constructing optimizer if the module will
      live on GPU while being optimized.

      :param device: if specified, all parameters will be
                     copied to that device
      :type device: int, optional

      :returns: self
      :rtype: Module


   .. method:: cpu(self: T) -> T

      Moves all model parameters and buffers to the CPU.

      :returns: self
      :rtype: Module


   .. method:: type(self: T, dst_type: Union[(dtype, str)]) -> T

      Casts all parameters and buffers to :attr:`dst_type`.

      :param dst_type: the desired type
      :type dst_type: type or string

      :returns: self
      :rtype: Module


   .. method:: float(self: T) -> T

      Casts all floating point parameters and buffers to float datatype.

      :returns: self
      :rtype: Module


   .. method:: double(self: T) -> T

      Casts all floating point parameters and buffers to ``double`` datatype.

      :returns: self
      :rtype: Module


   .. method:: half(self: T) -> T

      Casts all floating point parameters and buffers to ``half`` datatype.

      :returns: self
      :rtype: Module


   .. method:: bfloat16(self: T) -> T

      Casts all floating point parameters and buffers to ``bfloat16`` datatype.

      :returns: self
      :rtype: Module


   .. method:: to(self: T, device: Optional[Union[int, device]] = ..., dtype: Optional[Union[dtype, str]] = ..., non_blocking: bool = ...) -> T
               to(self: T, dtype: Union[(dtype, str)], non_blocking: bool = ...) -> T
               to(self: T, tensor: torch.Tensor, non_blocking: bool = ...) -> T

      Moves and/or casts the parameters and buffers.

      This can be called as

      .. function:: to(device=None, dtype=None, non_blocking=False)

      .. function:: to(dtype, non_blocking=False)

      .. function:: to(tensor, non_blocking=False)

      .. function:: to(memory_format=torch.channels_last)

      Its signature is similar to :meth:`torch.Tensor.to`, but only accepts
      floating point desired :attr:`dtype` s. In addition, this method will
      only cast the floating point parameters and buffers to :attr:`dtype`
      (if given). The integral parameters and buffers will be moved
      :attr:`device`, if that is given, but with dtypes unchanged. When
      :attr:`non_blocking` is set, it tries to convert/move asynchronously
      with respect to the host if possible, e.g., moving CPU Tensors with
      pinned memory to CUDA devices.

      See below for examples.

      .. note::
          This method modifies the module in-place.

      :param device: the desired device of the parameters
                     and buffers in this module
      :type device: :class:`torch.device`
      :param dtype: the desired floating point type of
                    the floating point parameters and buffers in this module
      :type dtype: :class:`torch.dtype`
      :param tensor: Tensor whose dtype and device are the desired
                     dtype and device for all parameters and buffers in this module
      :type tensor: torch.Tensor
      :param memory_format: the desired memory
                            format for 4D parameters and buffers in this module (keyword
                            only argument)
      :type memory_format: :class:`torch.memory_format`

      :returns: self
      :rtype: Module

      Example::

          >>> linear = nn.Linear(2, 2)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1913, -0.3420],
                  [-0.5113, -0.2325]])
          >>> linear.to(torch.double)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1913, -0.3420],
                  [-0.5113, -0.2325]], dtype=torch.float64)
          >>> gpu1 = torch.device("cuda:1")
          >>> linear.to(gpu1, dtype=torch.half, non_blocking=True)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1914, -0.3420],
                  [-0.5112, -0.2324]], dtype=torch.float16, device='cuda:1')
          >>> cpu = torch.device("cpu")
          >>> linear.to(cpu)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1914, -0.3420],
                  [-0.5112, -0.2324]], dtype=torch.float16)


   .. method:: register_backward_hook(self, hook: Callable[(['Module', _grad_t, _grad_t], Union[None, Tensor])]) -> torch.utils.hooks.RemovableHandle

      Registers a backward hook on the module.

      .. warning ::

          The current implementation will not have the presented behavior
          for complex :class:`Module` that perform many operations.
          In some failure cases, :attr:`grad_input` and :attr:`grad_output` will only
          contain the gradients for a subset of the inputs and outputs.
          For such :class:`Module`, you should use :func:`torch.Tensor.register_hook`
          directly on a specific input or output to get the required gradients.

      The hook will be called every time the gradients with respect to module
      inputs are computed. The hook should have the following signature::

          hook(module, grad_input, grad_output) -> Tensor or None

      The :attr:`grad_input` and :attr:`grad_output` may be tuples if the
      module has multiple inputs or outputs. The hook should not modify its
      arguments, but it can optionally return a new gradient with respect to
      input that will be used in place of :attr:`grad_input` in subsequent
      computations. :attr:`grad_input` will only correspond to the inputs given
      as positional arguments.

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`


   .. method:: register_forward_pre_hook(self, hook: Callable[(..., None)]) -> torch.utils.hooks.RemovableHandle

      Registers a forward pre-hook on the module.

      The hook will be called every time before :func:`forward` is invoked.
      It should have the following signature::

          hook(module, input) -> None or modified input

      The input contains only the positional arguments given to the module.
      Keyword arguments won't be passed to the hooks and only to the ``forward``.
      The hook can modify the input. User can either return a tuple or a
      single modified value in the hook. We will wrap the value into a tuple
      if a single value is returned(unless that value is already a tuple).

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`


   .. method:: register_forward_hook(self, hook: Callable[(..., None)]) -> torch.utils.hooks.RemovableHandle

      Registers a forward hook on the module.

      The hook will be called every time after :func:`forward` has computed an output.
      It should have the following signature::

          hook(module, input, output) -> None or modified output

      The input contains only the positional arguments given to the module.
      Keyword arguments won't be passed to the hooks and only to the ``forward``.
      The hook can modify the output. It can modify the input inplace but
      it will not have effect on forward since this is called after
      :func:`forward` is called.

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`


   .. method:: state_dict(self, destination: T_destination, prefix: str = ..., keep_vars: bool = ...) -> T_destination
               state_dict(self, prefix: str = ..., keep_vars: bool = ...) -> Dict[(str, Tensor)]

      Returns a dictionary containing a whole state of the module.

      Both parameters and persistent buffers (e.g. running averages) are
      included. Keys are corresponding parameter and buffer names.

      :returns:     a dictionary containing a whole state of the module
      :rtype: dict

      Example::

          >>> module.state_dict().keys()
          ['bias', 'weight']


   .. method:: load_state_dict(self, state_dict: Union[(Dict[str, Tensor], Dict[str, Tensor])], strict: bool = True)

      Copies parameters and buffers from :attr:`state_dict` into
      this module and its descendants. If :attr:`strict` is ``True``, then
      the keys of :attr:`state_dict` must exactly match the keys returned
      by this module's :meth:`~torch.nn.Module.state_dict` function.

      :param state_dict: a dict containing parameters and
                         persistent buffers.
      :type state_dict: dict
      :param strict: whether to strictly enforce that the keys
                     in :attr:`state_dict` match the keys returned by this module's
                     :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
      :type strict: bool, optional

      :returns:     * **missing_keys** is a list of str containing the missing keys
                    * **unexpected_keys** is a list of str containing the unexpected keys
      :rtype: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields


   .. method:: parameters(self, recurse: bool = True) -> Iterator[Parameter]

      Returns an iterator over module parameters.

      This is typically passed to an optimizer.

      :param recurse: if True, then yields parameters of this module
                      and all submodules. Otherwise, yields only parameters that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *Parameter* -- module parameter

      Example::

          >>> for param in model.parameters():
          >>>     print(type(param), param.size())
          <class 'torch.Tensor'> (20L,)
          <class 'torch.Tensor'> (20L, 1L, 5L, 5L)


   .. method:: named_parameters(self, prefix: str = '', recurse: bool = True) -> Iterator[Tuple[str, Tensor]]

      Returns an iterator over module parameters, yielding both the
      name of the parameter as well as the parameter itself.

      :param prefix: prefix to prepend to all parameter names.
      :type prefix: str
      :param recurse: if True, then yields parameters of this module
                      and all submodules. Otherwise, yields only parameters that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *(string, Parameter)* -- Tuple containing the name and parameter

      Example::

          >>> for name, param in self.named_parameters():
          >>>    if name in ['bias']:
          >>>        print(param.size())


   .. method:: buffers(self, recurse: bool = True) -> Iterator[Tensor]

      Returns an iterator over module buffers.

      :param recurse: if True, then yields buffers of this module
                      and all submodules. Otherwise, yields only buffers that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *torch.Tensor* -- module buffer

      Example::

          >>> for buf in model.buffers():
          >>>     print(type(buf), buf.size())
          <class 'torch.Tensor'> (20L,)
          <class 'torch.Tensor'> (20L, 1L, 5L, 5L)


   .. method:: named_buffers(self, prefix: str = '', recurse: bool = True) -> Iterator[Tuple[str, Tensor]]

      Returns an iterator over module buffers, yielding both the
      name of the buffer as well as the buffer itself.

      :param prefix: prefix to prepend to all buffer names.
      :type prefix: str
      :param recurse: if True, then yields buffers of this module
                      and all submodules. Otherwise, yields only buffers that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *(string, torch.Tensor)* -- Tuple containing the name and buffer

      Example::

          >>> for name, buf in self.named_buffers():
          >>>    if name in ['running_var']:
          >>>        print(buf.size())


   .. method:: children(self) -> Iterator['Module']

      Returns an iterator over immediate children modules.

      :Yields: *Module* -- a child module


   .. method:: named_children(self) -> Iterator[Tuple[str, 'Module']]

      Returns an iterator over immediate children modules, yielding both
      the name of the module as well as the module itself.

      :Yields: *(string, Module)* -- Tuple containing a name and child module

      Example::

          >>> for name, module in model.named_children():
          >>>     if name in ['conv4', 'conv5']:
          >>>         print(module)


   .. method:: modules(self) -> Iterator['Module']

      Returns an iterator over all modules in the network.

      :Yields: *Module* -- a module in the network

      .. note::

         Duplicate modules are returned only once. In the following
         example, ``l`` will be returned only once.

      Example::

          >>> l = nn.Linear(2, 2)
          >>> net = nn.Sequential(l, l)
          >>> for idx, m in enumerate(net.modules()):
                  print(idx, '->', m)

          0 -> Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )
          1 -> Linear(in_features=2, out_features=2, bias=True)


   .. method:: named_modules(self, memo: Optional[Set['Module']] = None, prefix: str = '')

      Returns an iterator over all modules in the network, yielding
      both the name of the module as well as the module itself.

      :Yields: *(string, Module)* -- Tuple of name and module

      .. note::

         Duplicate modules are returned only once. In the following
         example, ``l`` will be returned only once.

      Example::

          >>> l = nn.Linear(2, 2)
          >>> net = nn.Sequential(l, l)
          >>> for idx, m in enumerate(net.named_modules()):
                  print(idx, '->', m)

          0 -> ('', Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          ))
          1 -> ('0', Linear(in_features=2, out_features=2, bias=True))


   .. method:: train(self: T, mode: bool = True) -> T

      Sets the module in training mode.

      This has any effect only on certain modules. See documentations of
      particular modules for details of their behaviors in training/evaluation
      mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,
      etc.

      :param mode: whether to set training mode (``True``) or evaluation
                   mode (``False``). Default: ``True``.
      :type mode: bool

      :returns: self
      :rtype: Module


   .. method:: eval(self: T) -> T

      Sets the module in evaluation mode.

      This has any effect only on certain modules. See documentations of
      particular modules for details of their behaviors in training/evaluation
      mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,
      etc.

      This is equivalent with :meth:`self.train(False) <torch.nn.Module.train>`.

      :returns: self
      :rtype: Module


   .. method:: requires_grad_(self: T, requires_grad: bool = True) -> T

      Change if autograd should record operations on parameters in this
      module.

      This method sets the parameters' :attr:`requires_grad` attributes
      in-place.

      This method is helpful for freezing part of the module for finetuning
      or training parts of a model individually (e.g., GAN training).

      :param requires_grad: whether autograd should record operations on
                            parameters in this module. Default: ``True``.
      :type requires_grad: bool

      :returns: self
      :rtype: Module


   .. method:: zero_grad(self, set_to_none: bool = False) -> None

      Sets gradients of all model parameters to zero. See similar function
      under :class:`torch.optim.Optimizer` for more context.

      :param set_to_none: instead of setting to zero, set the grads to None.
                          See :meth:`torch.optim.Optimizer.zero_grad` for details.
      :type set_to_none: bool


   .. method:: share_memory(self: T) -> T


   .. method:: extra_repr(self) -> str

      Set the extra representation of the module

      To print customized extra information, you should re-implement
      this method in your own modules. Both single-line and multi-line
      strings are acceptable.


   .. method:: register(cls: Type[T], name: str, constructor: str = None, exist_ok: bool = False) -> Callable[([Type[T]], Type[T])]
      :classmethod:

      Transparent method

      :param name: TODO
      :param constructor: TODO
      :param exist_ok: TODO

      :returns: a wrapped callable



